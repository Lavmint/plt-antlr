//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 /data/cloud/Git/PLT/Analyzer/ANTLR/art.g 2015-12-05 01:01:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class artLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int AND=4;
	public const int ASSIGN=5;
	public const int BEGIN=6;
	public const int BLOCK=7;
	public const int BOOLEAN=8;
	public const int COLON=9;
	public const int COMMA=10;
	public const int COMMENT=11;
	public const int DO=12;
	public const int DOT=13;
	public const int ELSE=14;
	public const int END=15;
	public const int EQUAL=16;
	public const int EXPONENT=17;
	public const int FALSE=18;
	public const int FOR=19;
	public const int GE=20;
	public const int GT=21;
	public const int IDENT=22;
	public const int IDLIST=23;
	public const int IF=24;
	public const int INTEGER=25;
	public const int LCURLY=26;
	public const int LE=27;
	public const int LPAREN=28;
	public const int LT=29;
	public const int MINUS=30;
	public const int NOT=31;
	public const int NOT_EQUAL=32;
	public const int NUMLIST=33;
	public const int NUM_BIN=34;
	public const int NUM_DEC=35;
	public const int NUM_HEX=36;
	public const int NUM_OCT=37;
	public const int NUM_REAL=38;
	public const int OR=39;
	public const int PLUS=40;
	public const int PROGRAM=41;
	public const int RCURLY=42;
	public const int READ=43;
	public const int REAL=44;
	public const int RPAREN=45;
	public const int SEMI=46;
	public const int SLASH=47;
	public const int STAR=48;
	public const int THEN=49;
	public const int TO=50;
	public const int TRUE=51;
	public const int VAR=52;
	public const int VARDECL=53;
	public const int WHILE=54;
	public const int WRITE=55;
	public const int WS=56;

    // delegates
    // delegators

	public artLexer()
	{
		OnCreated();
	}

	public artLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public artLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "/data/cloud/Git/PLT/Analyzer/ANTLR/art.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 1);
		TraceIn("AND", 1);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:7:5: ( 'and' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:7:7: 'and'
			{
			DebugLocation(7, 7);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 1);
			LeaveRule("AND", 1);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 2);
		TraceIn("ASSIGN", 2);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:8:8: ( 'ass' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:8:10: 'ass'
			{
			DebugLocation(8, 10);
			Match("ass"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 2);
			LeaveRule("ASSIGN", 2);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_BEGIN();
	partial void LeaveRule_BEGIN();

	// $ANTLR start "BEGIN"
	[GrammarRule("BEGIN")]
	private void mBEGIN()
	{
		EnterRule_BEGIN();
		EnterRule("BEGIN", 3);
		TraceIn("BEGIN", 3);
		try
		{
			int _type = BEGIN;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:9:7: ( 'begin' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:9:9: 'begin'
			{
			DebugLocation(9, 9);
			Match("begin"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BEGIN", 3);
			LeaveRule("BEGIN", 3);
			LeaveRule_BEGIN();
		}
	}
	// $ANTLR end "BEGIN"

	partial void EnterRule_BOOLEAN();
	partial void LeaveRule_BOOLEAN();

	// $ANTLR start "BOOLEAN"
	[GrammarRule("BOOLEAN")]
	private void mBOOLEAN()
	{
		EnterRule_BOOLEAN();
		EnterRule("BOOLEAN", 4);
		TraceIn("BOOLEAN", 4);
		try
		{
			int _type = BOOLEAN;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:10:9: ( '$' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:10:11: '$'
			{
			DebugLocation(10, 11);
			Match('$'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOLEAN", 4);
			LeaveRule("BOOLEAN", 4);
			LeaveRule_BOOLEAN();
		}
	}
	// $ANTLR end "BOOLEAN"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 5);
		TraceIn("COLON", 5);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:11:7: ( ':' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:11:9: ':'
			{
			DebugLocation(11, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 5);
			LeaveRule("COLON", 5);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 6);
		TraceIn("COMMA", 6);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:12:7: ( ',' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:12:9: ','
			{
			DebugLocation(12, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 6);
			LeaveRule("COMMA", 6);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_DO();
	partial void LeaveRule_DO();

	// $ANTLR start "DO"
	[GrammarRule("DO")]
	private void mDO()
	{
		EnterRule_DO();
		EnterRule("DO", 7);
		TraceIn("DO", 7);
		try
		{
			int _type = DO;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:13:4: ( 'do' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:13:6: 'do'
			{
			DebugLocation(13, 6);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DO", 7);
			LeaveRule("DO", 7);
			LeaveRule_DO();
		}
	}
	// $ANTLR end "DO"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 8);
		TraceIn("DOT", 8);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:14:5: ( '.' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:14:7: '.'
			{
			DebugLocation(14, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 8);
			LeaveRule("DOT", 8);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 9);
		TraceIn("ELSE", 9);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:15:6: ( 'else' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:15:8: 'else'
			{
			DebugLocation(15, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 9);
			LeaveRule("ELSE", 9);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 10);
		TraceIn("END", 10);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:16:5: ( 'end' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:16:7: 'end'
			{
			DebugLocation(16, 7);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 10);
			LeaveRule("END", 10);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 11);
		TraceIn("EQUAL", 11);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:17:7: ( '=' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:17:9: '='
			{
			DebugLocation(17, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 11);
			LeaveRule("EQUAL", 11);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 12);
		TraceIn("FALSE", 12);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:18:7: ( 'false' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:18:9: 'false'
			{
			DebugLocation(18, 9);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 12);
			LeaveRule("FALSE", 12);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_FOR();
	partial void LeaveRule_FOR();

	// $ANTLR start "FOR"
	[GrammarRule("FOR")]
	private void mFOR()
	{
		EnterRule_FOR();
		EnterRule("FOR", 13);
		TraceIn("FOR", 13);
		try
		{
			int _type = FOR;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:19:5: ( 'for' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:19:7: 'for'
			{
			DebugLocation(19, 7);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FOR", 13);
			LeaveRule("FOR", 13);
			LeaveRule_FOR();
		}
	}
	// $ANTLR end "FOR"

	partial void EnterRule_GE();
	partial void LeaveRule_GE();

	// $ANTLR start "GE"
	[GrammarRule("GE")]
	private void mGE()
	{
		EnterRule_GE();
		EnterRule("GE", 14);
		TraceIn("GE", 14);
		try
		{
			int _type = GE;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:20:4: ( '>=' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:20:6: '>='
			{
			DebugLocation(20, 6);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GE", 14);
			LeaveRule("GE", 14);
			LeaveRule_GE();
		}
	}
	// $ANTLR end "GE"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 15);
		TraceIn("GT", 15);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:21:4: ( '>' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:21:6: '>'
			{
			DebugLocation(21, 6);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 15);
			LeaveRule("GT", 15);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 16);
		TraceIn("IF", 16);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:22:4: ( 'if' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:22:6: 'if'
			{
			DebugLocation(22, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 16);
			LeaveRule("IF", 16);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 17);
		TraceIn("INTEGER", 17);
		try
		{
			int _type = INTEGER;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:23:9: ( '%' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:23:11: '%'
			{
			DebugLocation(23, 11);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER", 17);
			LeaveRule("INTEGER", 17);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_LCURLY();
	partial void LeaveRule_LCURLY();

	// $ANTLR start "LCURLY"
	[GrammarRule("LCURLY")]
	private void mLCURLY()
	{
		EnterRule_LCURLY();
		EnterRule("LCURLY", 18);
		TraceIn("LCURLY", 18);
		try
		{
			int _type = LCURLY;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:24:8: ( '{' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:24:10: '{'
			{
			DebugLocation(24, 10);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LCURLY", 18);
			LeaveRule("LCURLY", 18);
			LeaveRule_LCURLY();
		}
	}
	// $ANTLR end "LCURLY"

	partial void EnterRule_LE();
	partial void LeaveRule_LE();

	// $ANTLR start "LE"
	[GrammarRule("LE")]
	private void mLE()
	{
		EnterRule_LE();
		EnterRule("LE", 19);
		TraceIn("LE", 19);
		try
		{
			int _type = LE;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:25:4: ( '<=' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:25:6: '<='
			{
			DebugLocation(25, 6);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LE", 19);
			LeaveRule("LE", 19);
			LeaveRule_LE();
		}
	}
	// $ANTLR end "LE"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 20);
		TraceIn("LPAREN", 20);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:26:8: ( '(' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:26:10: '('
			{
			DebugLocation(26, 10);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 20);
			LeaveRule("LPAREN", 20);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 21);
		TraceIn("LT", 21);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:27:4: ( '<' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:27:6: '<'
			{
			DebugLocation(27, 6);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 21);
			LeaveRule("LT", 21);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 22);
		TraceIn("MINUS", 22);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:28:7: ( '-' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:28:9: '-'
			{
			DebugLocation(28, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 22);
			LeaveRule("MINUS", 22);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 23);
		TraceIn("NOT", 23);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:29:5: ( 'not' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:29:7: 'not'
			{
			DebugLocation(29, 7);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 23);
			LeaveRule("NOT", 23);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_NOT_EQUAL();
	partial void LeaveRule_NOT_EQUAL();

	// $ANTLR start "NOT_EQUAL"
	[GrammarRule("NOT_EQUAL")]
	private void mNOT_EQUAL()
	{
		EnterRule_NOT_EQUAL();
		EnterRule("NOT_EQUAL", 24);
		TraceIn("NOT_EQUAL", 24);
		try
		{
			int _type = NOT_EQUAL;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:30:11: ( '<>' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:30:13: '<>'
			{
			DebugLocation(30, 13);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT_EQUAL", 24);
			LeaveRule("NOT_EQUAL", 24);
			LeaveRule_NOT_EQUAL();
		}
	}
	// $ANTLR end "NOT_EQUAL"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 25);
		TraceIn("OR", 25);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:31:4: ( 'or' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:31:6: 'or'
			{
			DebugLocation(31, 6);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 25);
			LeaveRule("OR", 25);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 26);
		TraceIn("PLUS", 26);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:32:6: ( '+' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:32:8: '+'
			{
			DebugLocation(32, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 26);
			LeaveRule("PLUS", 26);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_PROGRAM();
	partial void LeaveRule_PROGRAM();

	// $ANTLR start "PROGRAM"
	[GrammarRule("PROGRAM")]
	private void mPROGRAM()
	{
		EnterRule_PROGRAM();
		EnterRule("PROGRAM", 27);
		TraceIn("PROGRAM", 27);
		try
		{
			int _type = PROGRAM;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:33:9: ( 'program' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:33:11: 'program'
			{
			DebugLocation(33, 11);
			Match("program"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PROGRAM", 27);
			LeaveRule("PROGRAM", 27);
			LeaveRule_PROGRAM();
		}
	}
	// $ANTLR end "PROGRAM"

	partial void EnterRule_RCURLY();
	partial void LeaveRule_RCURLY();

	// $ANTLR start "RCURLY"
	[GrammarRule("RCURLY")]
	private void mRCURLY()
	{
		EnterRule_RCURLY();
		EnterRule("RCURLY", 28);
		TraceIn("RCURLY", 28);
		try
		{
			int _type = RCURLY;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:34:8: ( '}' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:34:10: '}'
			{
			DebugLocation(34, 10);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RCURLY", 28);
			LeaveRule("RCURLY", 28);
			LeaveRule_RCURLY();
		}
	}
	// $ANTLR end "RCURLY"

	partial void EnterRule_READ();
	partial void LeaveRule_READ();

	// $ANTLR start "READ"
	[GrammarRule("READ")]
	private void mREAD()
	{
		EnterRule_READ();
		EnterRule("READ", 29);
		TraceIn("READ", 29);
		try
		{
			int _type = READ;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:35:6: ( 'read' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:35:8: 'read'
			{
			DebugLocation(35, 8);
			Match("read"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("READ", 29);
			LeaveRule("READ", 29);
			LeaveRule_READ();
		}
	}
	// $ANTLR end "READ"

	partial void EnterRule_REAL();
	partial void LeaveRule_REAL();

	// $ANTLR start "REAL"
	[GrammarRule("REAL")]
	private void mREAL()
	{
		EnterRule_REAL();
		EnterRule("REAL", 30);
		TraceIn("REAL", 30);
		try
		{
			int _type = REAL;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:36:6: ( '!' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:36:8: '!'
			{
			DebugLocation(36, 8);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("REAL", 30);
			LeaveRule("REAL", 30);
			LeaveRule_REAL();
		}
	}
	// $ANTLR end "REAL"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 31);
		TraceIn("RPAREN", 31);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:37:8: ( ')' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:37:10: ')'
			{
			DebugLocation(37, 10);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 31);
			LeaveRule("RPAREN", 31);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 32);
		TraceIn("SEMI", 32);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:38:6: ( ';' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:38:8: ';'
			{
			DebugLocation(38, 8);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 32);
			LeaveRule("SEMI", 32);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_SLASH();
	partial void LeaveRule_SLASH();

	// $ANTLR start "SLASH"
	[GrammarRule("SLASH")]
	private void mSLASH()
	{
		EnterRule_SLASH();
		EnterRule("SLASH", 33);
		TraceIn("SLASH", 33);
		try
		{
			int _type = SLASH;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:39:7: ( '/' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:39:9: '/'
			{
			DebugLocation(39, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SLASH", 33);
			LeaveRule("SLASH", 33);
			LeaveRule_SLASH();
		}
	}
	// $ANTLR end "SLASH"

	partial void EnterRule_STAR();
	partial void LeaveRule_STAR();

	// $ANTLR start "STAR"
	[GrammarRule("STAR")]
	private void mSTAR()
	{
		EnterRule_STAR();
		EnterRule("STAR", 34);
		TraceIn("STAR", 34);
		try
		{
			int _type = STAR;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:40:6: ( '*' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:40:8: '*'
			{
			DebugLocation(40, 8);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STAR", 34);
			LeaveRule("STAR", 34);
			LeaveRule_STAR();
		}
	}
	// $ANTLR end "STAR"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 35);
		TraceIn("THEN", 35);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:41:6: ( 'then' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:41:8: 'then'
			{
			DebugLocation(41, 8);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 35);
			LeaveRule("THEN", 35);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_TO();
	partial void LeaveRule_TO();

	// $ANTLR start "TO"
	[GrammarRule("TO")]
	private void mTO()
	{
		EnterRule_TO();
		EnterRule("TO", 36);
		TraceIn("TO", 36);
		try
		{
			int _type = TO;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:42:4: ( 'to' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:42:6: 'to'
			{
			DebugLocation(42, 6);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TO", 36);
			LeaveRule("TO", 36);
			LeaveRule_TO();
		}
	}
	// $ANTLR end "TO"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 37);
		TraceIn("TRUE", 37);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:43:6: ( 'true' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:43:8: 'true'
			{
			DebugLocation(43, 8);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 37);
			LeaveRule("TRUE", 37);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_VAR();
	partial void LeaveRule_VAR();

	// $ANTLR start "VAR"
	[GrammarRule("VAR")]
	private void mVAR()
	{
		EnterRule_VAR();
		EnterRule("VAR", 38);
		TraceIn("VAR", 38);
		try
		{
			int _type = VAR;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:44:5: ( 'var' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:44:7: 'var'
			{
			DebugLocation(44, 7);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VAR", 38);
			LeaveRule("VAR", 38);
			LeaveRule_VAR();
		}
	}
	// $ANTLR end "VAR"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 39);
		TraceIn("WHILE", 39);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:45:7: ( 'while' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:45:9: 'while'
			{
			DebugLocation(45, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 39);
			LeaveRule("WHILE", 39);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_WRITE();
	partial void LeaveRule_WRITE();

	// $ANTLR start "WRITE"
	[GrammarRule("WRITE")]
	private void mWRITE()
	{
		EnterRule_WRITE();
		EnterRule("WRITE", 40);
		TraceIn("WRITE", 40);
		try
		{
			int _type = WRITE;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:46:7: ( 'write' )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:46:9: 'write'
			{
			DebugLocation(46, 9);
			Match("write"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WRITE", 40);
			LeaveRule("WRITE", 40);
			LeaveRule_WRITE();
		}
	}
	// $ANTLR end "WRITE"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 41);
		TraceIn("WS", 41);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:58:9: ( ( ' ' | '\\t' | '\\f' | ( '\\r\\n' | '\\r' | '\\n' ) ) )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:58:11: ( ' ' | '\\t' | '\\f' | ( '\\r\\n' | '\\r' | '\\n' ) )
			{
			DebugLocation(58, 11);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:58:11: ( ' ' | '\\t' | '\\f' | ( '\\r\\n' | '\\r' | '\\n' ) )
			int alt2=4;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case ' ':
				{
				alt2 = 1;
				}
				break;
			case '\t':
				{
				alt2 = 2;
				}
				break;
			case '\f':
				{
				alt2 = 3;
				}
				break;
			case '\n':
			case '\r':
				{
				alt2 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:58:12: ' '
				{
				DebugLocation(58, 12);
				Match(' '); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:58:16: '\\t'
				{
				DebugLocation(58, 16);
				Match('\t'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:58:21: '\\f'
				{
				DebugLocation(58, 21);
				Match('\f'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:58:26: ( '\\r\\n' | '\\r' | '\\n' )
				{
				DebugLocation(58, 26);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:58:26: ( '\\r\\n' | '\\r' | '\\n' )
				int alt1=3;
				try { DebugEnterSubRule(1);
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0=='\r'))
				{
					int LA1_1 = input.LA(2);

					if ((LA1_1=='\n'))
					{
						alt1 = 1;
					}
					else
					{
						alt1 = 2;
					}
				}
				else if ((LA1_0=='\n'))
				{
					alt1 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:58:27: '\\r\\n'
					{
					DebugLocation(58, 27);
					Match("\r\n"); 


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:58:34: '\\r'
					{
					DebugLocation(58, 34);
					Match('\r'); 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:58:39: '\\n'
					{
					DebugLocation(58, 39);
					Match('\n'); 

					}
					break;

				}
				} finally { DebugExitSubRule(1); }

				DebugLocation(58, 45);
				  

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(58, 51);
			 _channel=HIDDEN; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 41);
			LeaveRule("WS", 41);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 42);
		TraceIn("COMMENT", 42);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:59:9: ( LCURLY ( . )* RCURLY )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:59:11: LCURLY ( . )* RCURLY
			{
			DebugLocation(59, 11);
			mLCURLY(); 
			DebugLocation(59, 17);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:59:17: ( . )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0=='}'))
				{
					alt3 = 2;
				}
				else if (((LA3_0>='\u0000' && LA3_0<='|')||(LA3_0>='~' && LA3_0<='\uFFFF')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:59:18: .
					{
					DebugLocation(59, 18);
					MatchAny(); 

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(59, 21);
			mRCURLY(); 
			DebugLocation(59, 29);
			_channel=HIDDEN; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 42);
			LeaveRule("COMMENT", 42);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_IDENT();
	partial void LeaveRule_IDENT();

	// $ANTLR start "IDENT"
	[GrammarRule("IDENT")]
	private void mIDENT()
	{
		EnterRule_IDENT();
		EnterRule("IDENT", 43);
		TraceIn("IDENT", 43);
		try
		{
			int _type = IDENT;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:62:7: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )* )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:62:9: ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )*
			{
			DebugLocation(62, 9);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(62, 29);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:62:29: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>='0' && LA4_0<='9')||(LA4_0>='A' && LA4_0<='Z')||(LA4_0>='a' && LA4_0<='z')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:
					{
					DebugLocation(62, 29);
					input.Consume();


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENT", 43);
			LeaveRule("IDENT", 43);
			LeaveRule_IDENT();
		}
	}
	// $ANTLR end "IDENT"

	partial void EnterRule_NUM_BIN();
	partial void LeaveRule_NUM_BIN();

	// $ANTLR start "NUM_BIN"
	[GrammarRule("NUM_BIN")]
	private void mNUM_BIN()
	{
		EnterRule_NUM_BIN();
		EnterRule("NUM_BIN", 44);
		TraceIn("NUM_BIN", 44);
		try
		{
			int _type = NUM_BIN;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:64:9: ( ( '0' .. '1' )+ ( 'B' | 'b' ) )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:64:11: ( '0' .. '1' )+ ( 'B' | 'b' )
			{
			DebugLocation(64, 11);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:64:11: ( '0' .. '1' )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>='0' && LA5_0<='1')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:
					{
					DebugLocation(64, 11);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(64, 22);
			if (input.LA(1)=='B'||input.LA(1)=='b')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUM_BIN", 44);
			LeaveRule("NUM_BIN", 44);
			LeaveRule_NUM_BIN();
		}
	}
	// $ANTLR end "NUM_BIN"

	partial void EnterRule_NUM_OCT();
	partial void LeaveRule_NUM_OCT();

	// $ANTLR start "NUM_OCT"
	[GrammarRule("NUM_OCT")]
	private void mNUM_OCT()
	{
		EnterRule_NUM_OCT();
		EnterRule("NUM_OCT", 45);
		TraceIn("NUM_OCT", 45);
		try
		{
			int _type = NUM_OCT;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:65:9: ( ( '0' .. '7' )+ ( 'O' | 'o' ) )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:65:11: ( '0' .. '7' )+ ( 'O' | 'o' )
			{
			DebugLocation(65, 11);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:65:11: ( '0' .. '7' )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='0' && LA6_0<='7')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:
					{
					DebugLocation(65, 11);
					input.Consume();


					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(65, 22);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUM_OCT", 45);
			LeaveRule("NUM_OCT", 45);
			LeaveRule_NUM_OCT();
		}
	}
	// $ANTLR end "NUM_OCT"

	partial void EnterRule_NUM_DEC();
	partial void LeaveRule_NUM_DEC();

	// $ANTLR start "NUM_DEC"
	[GrammarRule("NUM_DEC")]
	private void mNUM_DEC()
	{
		EnterRule_NUM_DEC();
		EnterRule("NUM_DEC", 46);
		TraceIn("NUM_DEC", 46);
		try
		{
			int _type = NUM_DEC;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:66:9: ( ( '0' .. '9' )+ ( 'D' | 'd' )? )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:66:11: ( '0' .. '9' )+ ( 'D' | 'd' )?
			{
			DebugLocation(66, 11);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:66:11: ( '0' .. '9' )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if (((LA7_0>='0' && LA7_0<='9')))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:
					{
					DebugLocation(66, 11);
					input.Consume();


					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(66, 22);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:66:22: ( 'D' | 'd' )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0=='D'||LA8_0=='d'))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:
				{
				DebugLocation(66, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(8); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUM_DEC", 46);
			LeaveRule("NUM_DEC", 46);
			LeaveRule_NUM_DEC();
		}
	}
	// $ANTLR end "NUM_DEC"

	partial void EnterRule_NUM_HEX();
	partial void LeaveRule_NUM_HEX();

	// $ANTLR start "NUM_HEX"
	[GrammarRule("NUM_HEX")]
	private void mNUM_HEX()
	{
		EnterRule_NUM_HEX();
		EnterRule("NUM_HEX", 47);
		TraceIn("NUM_HEX", 47);
		try
		{
			int _type = NUM_HEX;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:67:9: ( ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' )+ ( 'H' | 'h' ) )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:67:11: ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' )+ ( 'H' | 'h' )
			{
			DebugLocation(67, 11);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:67:11: ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if (((LA9_0>='0' && LA9_0<='9')||(LA9_0>='A' && LA9_0<='F')||(LA9_0>='a' && LA9_0<='f')))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:
					{
					DebugLocation(67, 11);
					input.Consume();


					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(67, 40);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUM_HEX", 47);
			LeaveRule("NUM_HEX", 47);
			LeaveRule_NUM_HEX();
		}
	}
	// $ANTLR end "NUM_HEX"

	partial void EnterRule_NUM_REAL();
	partial void LeaveRule_NUM_REAL();

	// $ANTLR start "NUM_REAL"
	[GrammarRule("NUM_REAL")]
	private void mNUM_REAL()
	{
		EnterRule_NUM_REAL();
		EnterRule("NUM_REAL", 48);
		TraceIn("NUM_REAL", 48);
		try
		{
			int _type = NUM_REAL;
			int _channel = DefaultTokenChannel;
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:69:9: ( ( '0' .. '9' )+ EXPONENT | ( '0' .. '9' )? DOT ( '0' .. '9' )+ ( EXPONENT )? )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if (((LA14_0>='0' && LA14_0<='9')))
			{
				int LA14_1 = input.LA(2);

				if (((LA14_1>='0' && LA14_1<='9')||LA14_1=='E'||LA14_1=='e'))
				{
					alt14 = 1;
				}
				else if ((LA14_1=='.'))
				{
					alt14 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA14_0=='.'))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:69:11: ( '0' .. '9' )+ EXPONENT
				{
				DebugLocation(69, 11);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:69:11: ( '0' .. '9' )+
				int cnt10=0;
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if (((LA10_0>='0' && LA10_0<='9')))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
					case 1:
						DebugEnterAlt(1);
						// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:
						{
						DebugLocation(69, 11);
						input.Consume();


						}
						break;

					default:
						if (cnt10 >= 1)
							goto loop10;

						EarlyExitException eee10 = new EarlyExitException( 10, input );
						DebugRecognitionException(eee10);
						throw eee10;
					}
					cnt10++;
				}
				loop10:
					;

				} finally { DebugExitSubRule(10); }

				DebugLocation(69, 22);
				mEXPONENT(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:69:31: ( '0' .. '9' )? DOT ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(69, 31);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:69:31: ( '0' .. '9' )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if (((LA11_0>='0' && LA11_0<='9')))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:
					{
					DebugLocation(69, 31);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(69, 41);
				mDOT(); 
				DebugLocation(69, 45);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:69:45: ( '0' .. '9' )+
				int cnt12=0;
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if (((LA12_0>='0' && LA12_0<='9')))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:
						{
						DebugLocation(69, 45);
						input.Consume();


						}
						break;

					default:
						if (cnt12 >= 1)
							goto loop12;

						EarlyExitException eee12 = new EarlyExitException( 12, input );
						DebugRecognitionException(eee12);
						throw eee12;
					}
					cnt12++;
				}
				loop12:
					;

				} finally { DebugExitSubRule(12); }

				DebugLocation(69, 57);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:69:57: ( EXPONENT )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0=='E'||LA13_0=='e'))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:69:57: EXPONENT
					{
					DebugLocation(69, 57);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(13); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUM_REAL", 48);
			LeaveRule("NUM_REAL", 48);
			LeaveRule_NUM_REAL();
		}
	}
	// $ANTLR end "NUM_REAL"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 49);
		TraceIn("EXPONENT", 49);
		try
		{
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:70:18: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:70:21: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(70, 21);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(70, 31);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:70:31: ( '+' | '-' )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0=='+'||LA15_0=='-'))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:
				{
				DebugLocation(70, 31);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(70, 42);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:70:42: ( '0' .. '9' )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if (((LA16_0>='0' && LA16_0<='9')))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:
					{
					DebugLocation(70, 42);
					input.Consume();


					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 49);
			LeaveRule("EXPONENT", 49);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	public override void mTokens()
	{
		// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:8: ( AND | ASSIGN | BEGIN | BOOLEAN | COLON | COMMA | DO | DOT | ELSE | END | EQUAL | FALSE | FOR | GE | GT | IF | INTEGER | LCURLY | LE | LPAREN | LT | MINUS | NOT | NOT_EQUAL | OR | PLUS | PROGRAM | RCURLY | READ | REAL | RPAREN | SEMI | SLASH | STAR | THEN | TO | TRUE | VAR | WHILE | WRITE | WS | COMMENT | IDENT | NUM_BIN | NUM_OCT | NUM_DEC | NUM_HEX | NUM_REAL )
		int alt17=48;
		try { DebugEnterDecision(17, false);
		try
		{
			alt17 = dfa17.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(17); }
		switch (alt17)
		{
		case 1:
			DebugEnterAlt(1);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:10: AND
			{
			DebugLocation(1, 10);
			mAND(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:14: ASSIGN
			{
			DebugLocation(1, 14);
			mASSIGN(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:21: BEGIN
			{
			DebugLocation(1, 21);
			mBEGIN(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:27: BOOLEAN
			{
			DebugLocation(1, 27);
			mBOOLEAN(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:35: COLON
			{
			DebugLocation(1, 35);
			mCOLON(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:41: COMMA
			{
			DebugLocation(1, 41);
			mCOMMA(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:47: DO
			{
			DebugLocation(1, 47);
			mDO(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:50: DOT
			{
			DebugLocation(1, 50);
			mDOT(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:54: ELSE
			{
			DebugLocation(1, 54);
			mELSE(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:59: END
			{
			DebugLocation(1, 59);
			mEND(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:63: EQUAL
			{
			DebugLocation(1, 63);
			mEQUAL(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:69: FALSE
			{
			DebugLocation(1, 69);
			mFALSE(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:75: FOR
			{
			DebugLocation(1, 75);
			mFOR(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:79: GE
			{
			DebugLocation(1, 79);
			mGE(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:82: GT
			{
			DebugLocation(1, 82);
			mGT(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:85: IF
			{
			DebugLocation(1, 85);
			mIF(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:88: INTEGER
			{
			DebugLocation(1, 88);
			mINTEGER(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:96: LCURLY
			{
			DebugLocation(1, 96);
			mLCURLY(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:103: LE
			{
			DebugLocation(1, 103);
			mLE(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:106: LPAREN
			{
			DebugLocation(1, 106);
			mLPAREN(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:113: LT
			{
			DebugLocation(1, 113);
			mLT(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:116: MINUS
			{
			DebugLocation(1, 116);
			mMINUS(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:122: NOT
			{
			DebugLocation(1, 122);
			mNOT(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:126: NOT_EQUAL
			{
			DebugLocation(1, 126);
			mNOT_EQUAL(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:136: OR
			{
			DebugLocation(1, 136);
			mOR(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:139: PLUS
			{
			DebugLocation(1, 139);
			mPLUS(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:144: PROGRAM
			{
			DebugLocation(1, 144);
			mPROGRAM(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:152: RCURLY
			{
			DebugLocation(1, 152);
			mRCURLY(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:159: READ
			{
			DebugLocation(1, 159);
			mREAD(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:164: REAL
			{
			DebugLocation(1, 164);
			mREAL(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:169: RPAREN
			{
			DebugLocation(1, 169);
			mRPAREN(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:176: SEMI
			{
			DebugLocation(1, 176);
			mSEMI(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:181: SLASH
			{
			DebugLocation(1, 181);
			mSLASH(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:187: STAR
			{
			DebugLocation(1, 187);
			mSTAR(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:192: THEN
			{
			DebugLocation(1, 192);
			mTHEN(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:197: TO
			{
			DebugLocation(1, 197);
			mTO(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:200: TRUE
			{
			DebugLocation(1, 200);
			mTRUE(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:205: VAR
			{
			DebugLocation(1, 205);
			mVAR(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:209: WHILE
			{
			DebugLocation(1, 209);
			mWHILE(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:215: WRITE
			{
			DebugLocation(1, 215);
			mWRITE(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:221: WS
			{
			DebugLocation(1, 221);
			mWS(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:224: COMMENT
			{
			DebugLocation(1, 224);
			mCOMMENT(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:232: IDENT
			{
			DebugLocation(1, 232);
			mIDENT(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:238: NUM_BIN
			{
			DebugLocation(1, 238);
			mNUM_BIN(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:246: NUM_OCT
			{
			DebugLocation(1, 246);
			mNUM_OCT(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:254: NUM_DEC
			{
			DebugLocation(1, 254);
			mNUM_DEC(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:262: NUM_HEX
			{
			DebugLocation(1, 262);
			mNUM_HEX(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// /data/cloud/Git/PLT/Analyzer/ANTLR/art.g:1:270: NUM_REAL
			{
			DebugLocation(1, 270);
			mNUM_REAL(); 

			}
			break;

		}

	}


	#region DFA
	DFA17 dfa17;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa17 = new DFA17(this, SpecialStateTransition17);
	}

	private class DFA17 : DFA
	{
		private const string DFA17_eotS =
			"\x1\xFFFF\x2\x25\x3\xFFFF\x1\x25\x1\x2C\x1\x25\x1\xFFFF\x1\x25\x1\x33"+
			"\x1\x25\x1\xFFFF\x1\x35\x1\x39\x2\xFFFF\x2\x25\x1\xFFFF\x1\x25\x1\xFFFF"+
			"\x1\x25\x5\xFFFF\x3\x25\x1\xFFFF\x1\x25\x3\x49\x1\xFFFF\x2\x25\x1\xFFFF"+
			"\x2\x25\x1\x50\x2\xFFFF\x4\x25\x2\xFFFF\x1\x55\x5\xFFFF\x1\x25\x1\x57"+
			"\x3\x25\x1\x5B\x4\x25\x1\x60\x1\x49\x1\xFFFF\x2\x49\x1\xFFFF\x1\x49\x2"+
			"\xFFFF\x1\x62\x1\x63\x1\x25\x1\xFFFF\x1\x25\x1\x66\x1\x25\x1\x68\x1\xFFFF"+
			"\x1\x69\x1\xFFFF\x3\x25\x1\xFFFF\x1\x25\x1\x6E\x2\x25\x1\xFFFF\x1\x2D"+
			"\x2\xFFFF\x1\x25\x1\x72\x1\xFFFF\x1\x25\x2\xFFFF\x1\x25\x1\x75\x1\x76"+
			"\x1\x77\x1\xFFFF\x2\x25\x1\x7A\x1\xFFFF\x1\x7B\x1\x25\x3\xFFFF\x1\x7D"+
			"\x1\x7E\x2\xFFFF\x1\x25\x2\xFFFF\x1\x80\x1\xFFFF";
		private const string DFA17_eofS =
			"\x81\xFFFF";
		private const string DFA17_minS =
			"\x1\x9\x2\x30\x3\xFFFF\x3\x30\x1\xFFFF\x1\x30\x1\x3D\x1\x66\x1\xFFFF"+
			"\x1\x0\x1\x3D\x2\xFFFF\x1\x6F\x1\x72\x1\xFFFF\x1\x72\x1\xFFFF\x1\x65"+
			"\x5\xFFFF\x1\x68\x1\x61\x1\x68\x1\xFFFF\x1\x30\x3\x2E\x1\xFFFF\x1\x64"+
			"\x1\x73\x1\xFFFF\x3\x30\x2\xFFFF\x1\x73\x1\x64\x1\x30\x1\x72\x2\xFFFF"+
			"\x1\x30\x5\xFFFF\x1\x74\x1\x30\x1\x6F\x1\x61\x1\x65\x1\x30\x1\x75\x1"+
			"\x72\x2\x69\x2\x30\x1\xFFFF\x2\x30\x1\xFFFF\x1\x30\x1\xFFFF\x1\x2B\x2"+
			"\x30\x1\x69\x1\xFFFF\x1\x65\x1\x30\x1\x73\x1\x30\x1\xFFFF\x1\x30\x1\xFFFF"+
			"\x1\x67\x1\x64\x1\x6E\x1\xFFFF\x1\x65\x1\x30\x1\x6C\x1\x74\x1\xFFFF\x1"+
			"\x30\x2\xFFFF\x1\x6E\x1\x30\x1\xFFFF\x1\x65\x2\xFFFF\x1\x72\x3\x30\x1"+
			"\xFFFF\x2\x65\x1\x30\x1\xFFFF\x1\x30\x1\x61\x3\xFFFF\x2\x30\x2\xFFFF"+
			"\x1\x6D\x2\xFFFF\x1\x30\x1\xFFFF";
		private const string DFA17_maxS =
			"\x1\x7D\x1\x73\x1\x68\x3\xFFFF\x1\x6F\x1\x39\x1\x6E\x1\xFFFF\x1\x6F\x1"+
			"\x3D\x1\x66\x1\xFFFF\x1\xFFFF\x1\x3E\x2\xFFFF\x1\x6F\x1\x72\x1\xFFFF"+
			"\x1\x72\x1\xFFFF\x1\x65\x5\xFFFF\x1\x72\x1\x61\x1\x72\x1\xFFFF\x1\x68"+
			"\x2\x6F\x1\x68\x1\xFFFF\x1\x64\x1\x73\x1\xFFFF\x2\x68\x1\x7A\x2\xFFFF"+
			"\x1\x73\x1\x64\x1\x6C\x1\x72\x2\xFFFF\x1\x7A\x5\xFFFF\x1\x74\x1\x7A\x1"+
			"\x6F\x1\x61\x1\x65\x1\x7A\x1\x75\x1\x72\x2\x69\x1\x68\x1\x6F\x1\xFFFF"+
			"\x1\x6F\x1\x68\x1\xFFFF\x1\x68\x1\xFFFF\x1\x68\x2\x7A\x1\x69\x1\xFFFF"+
			"\x1\x65\x1\x7A\x1\x73\x1\x7A\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x67\x1\x64\x1"+
			"\x6E\x1\xFFFF\x1\x65\x1\x7A\x1\x6C\x1\x74\x1\xFFFF\x1\x68\x2\xFFFF\x1"+
			"\x6E\x1\x7A\x1\xFFFF\x1\x65\x2\xFFFF\x1\x72\x3\x7A\x1\xFFFF\x2\x65\x1"+
			"\x7A\x1\xFFFF\x1\x7A\x1\x61\x3\xFFFF\x2\x7A\x2\xFFFF\x1\x6D\x2\xFFFF"+
			"\x1\x7A\x1\xFFFF";
		private const string DFA17_acceptS =
			"\x3\xFFFF\x1\x4\x1\x5\x1\x6\x3\xFFFF\x1\xB\x3\xFFFF\x1\x11\x2\xFFFF\x1"+
			"\x14\x1\x16\x2\xFFFF\x1\x1A\x1\xFFFF\x1\x1C\x1\xFFFF\x1\x1E\x1\x1F\x1"+
			"\x20\x1\x21\x1\x22\x3\xFFFF\x1\x29\x4\xFFFF\x1\x2B\x2\xFFFF\x1\x2B\x3"+
			"\xFFFF\x1\x8\x1\x30\x4\xFFFF\x1\xE\x1\xF\x1\xFFFF\x1\x12\x1\x2A\x1\x13"+
			"\x1\x18\x1\x15\xC\xFFFF\x1\x2D\x2\xFFFF\x1\x2E\x1\xFFFF\x1\x2F\x4\xFFFF"+
			"\x1\x7\x4\xFFFF\x1\x10\x1\xFFFF\x1\x19\x3\xFFFF\x1\x24\x4\xFFFF\x1\x2C"+
			"\x1\xFFFF\x1\x1\x1\x2\x2\xFFFF\x1\xA\x1\xFFFF\x1\xD\x1\x17\x4\xFFFF\x1"+
			"\x26\x3\xFFFF\x1\x9\x2\xFFFF\x1\x1D\x1\x23\x1\x25\x2\xFFFF\x1\x3\x1\xC"+
			"\x1\xFFFF\x1\x27\x1\x28\x1\xFFFF\x1\x1B";
		private const string DFA17_specialS =
			"\xE\xFFFF\x1\x0\x72\xFFFF}>";
		private static readonly string[] DFA17_transitionS =
			{
				"\x2\x20\x1\xFFFF\x2\x20\x12\xFFFF\x1\x20\x1\x18\x2\xFFFF\x1\x3\x1\xD"+
				"\x2\xFFFF\x1\x10\x1\x19\x1\x1C\x1\x14\x1\x5\x1\x11\x1\x7\x1\x1B\x2\x22"+
				"\x6\x23\x2\x24\x1\x4\x1\x1A\x1\xF\x1\x9\x1\xB\x2\xFFFF\x6\x21\x14\x25"+
				"\x6\xFFFF\x1\x1\x1\x2\x1\x21\x1\x6\x1\x8\x1\xA\x2\x25\x1\xC\x4\x25\x1"+
				"\x12\x1\x13\x1\x15\x1\x25\x1\x17\x1\x25\x1\x1D\x1\x25\x1\x1E\x1\x1F"+
				"\x3\x25\x1\xE\x1\xFFFF\x1\x16",
				"\xA\x29\x7\xFFFF\x6\x29\x1\xFFFF\x1\x28\x18\xFFFF\x6\x29\x1\xFFFF\x1"+
				"\x28\x5\xFFFF\x1\x26\x4\xFFFF\x1\x27",
				"\xA\x29\x7\xFFFF\x6\x29\x1\xFFFF\x1\x28\x18\xFFFF\x4\x29\x1\x2A\x1"+
				"\x29\x1\xFFFF\x1\x28",
				"",
				"",
				"",
				"\xA\x29\x7\xFFFF\x6\x29\x1\xFFFF\x1\x28\x18\xFFFF\x6\x29\x1\xFFFF\x1"+
				"\x28\x6\xFFFF\x1\x2B",
				"\xA\x2D",
				"\xA\x29\x7\xFFFF\x6\x29\x1\xFFFF\x1\x28\x18\xFFFF\x6\x29\x1\xFFFF\x1"+
				"\x28\x3\xFFFF\x1\x2E\x1\xFFFF\x1\x2F",
				"",
				"\xA\x29\x7\xFFFF\x6\x29\x1\xFFFF\x1\x28\x18\xFFFF\x1\x30\x5\x29\x1"+
				"\xFFFF\x1\x28\x6\xFFFF\x1\x31",
				"\x1\x32",
				"\x1\x34",
				"",
				"\x0\x36",
				"\x1\x37\x1\x38",
				"",
				"",
				"\x1\x3A",
				"\x1\x3B",
				"",
				"\x1\x3C",
				"",
				"\x1\x3D",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3E\x6\xFFFF\x1\x3F\x2\xFFFF\x1\x40",
				"\x1\x41",
				"\x1\x42\x9\xFFFF\x1\x43",
				"",
				"\xA\x29\x7\xFFFF\x6\x29\x1\xFFFF\x1\x28\x18\xFFFF\x6\x29\x1\xFFFF\x1"+
				"\x28",
				"\x1\x2D\x1\xFFFF\x2\x45\x6\x47\x2\x4A\x7\xFFFF\x1\x4B\x1\x44\x1\x4B"+
				"\x1\x48\x1\x4C\x1\x4B\x1\xFFFF\x1\x4B\x6\xFFFF\x1\x46\x11\xFFFF\x1\x4B"+
				"\x1\x44\x1\x4B\x1\x48\x1\x4C\x1\x4B\x1\xFFFF\x1\x4B\x6\xFFFF\x1\x46",
				"\x1\x2D\x1\xFFFF\x8\x47\x2\x4A\x7\xFFFF\x3\x4B\x1\x48\x1\x4C\x1\x4B"+
				"\x1\xFFFF\x1\x4B\x6\xFFFF\x1\x46\x11\xFFFF\x3\x4B\x1\x48\x1\x4C\x1\x4B"+
				"\x1\xFFFF\x1\x4B\x6\xFFFF\x1\x46",
				"\x1\x2D\x1\xFFFF\xA\x4A\x7\xFFFF\x3\x4B\x1\x48\x1\x4C\x1\x4B\x1\xFFFF"+
				"\x1\x4B\x18\xFFFF\x3\x4B\x1\x48\x1\x4C\x1\x4B\x1\xFFFF\x1\x4B",
				"",
				"\x1\x4D",
				"\x1\x4E",
				"",
				"\xA\x29\x7\xFFFF\x6\x29\x1\xFFFF\x1\x28\x18\xFFFF\x6\x29\x1\xFFFF\x1"+
				"\x28",
				"\xA\x29\x7\xFFFF\x6\x29\x1\xFFFF\x1\x28\x18\xFFFF\x6\x29\x1\x4F\x1"+
				"\x28",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"",
				"",
				"\x1\x51",
				"\x1\x52",
				"\xA\x29\x7\xFFFF\x6\x29\x1\xFFFF\x1\x28\x18\xFFFF\x6\x29\x1\xFFFF\x1"+
				"\x28\x3\xFFFF\x1\x53",
				"\x1\x54",
				"",
				"",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"",
				"",
				"",
				"",
				"",
				"\x1\x56",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"\x1\x58",
				"\x1\x59",
				"\x1\x5A",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"\x1\x5C",
				"\x1\x5D",
				"\x1\x5E",
				"\x1\x5F",
				"\xA\x4B\x7\xFFFF\x6\x4B\x1\xFFFF\x1\x4B\x18\xFFFF\x6\x4B\x1\xFFFF\x1"+
				"\x4B",
				"\x2\x45\x6\x47\x2\x4A\x7\xFFFF\x1\x4B\x1\x44\x1\x4B\x1\x48\x1\x4C\x1"+
				"\x4B\x1\xFFFF\x1\x4B\x6\xFFFF\x1\x46\x11\xFFFF\x1\x4B\x1\x44\x1\x4B"+
				"\x1\x48\x1\x4C\x1\x4B\x1\xFFFF\x1\x4B\x6\xFFFF\x1\x46",
				"",
				"\x8\x47\x2\x4A\x7\xFFFF\x3\x4B\x1\x48\x1\x4C\x1\x4B\x1\xFFFF\x1\x4B"+
				"\x6\xFFFF\x1\x46\x11\xFFFF\x3\x4B\x1\x48\x1\x4C\x1\x4B\x1\xFFFF\x1\x4B"+
				"\x6\xFFFF\x1\x46",
				"\xA\x4B\x7\xFFFF\x6\x4B\x1\xFFFF\x1\x4B\x18\xFFFF\x6\x4B\x1\xFFFF\x1"+
				"\x4B",
				"",
				"\xA\x4A\x7\xFFFF\x3\x4B\x1\x48\x1\x4C\x1\x4B\x1\xFFFF\x1\x4B\x18\xFFFF"+
				"\x3\x4B\x1\x48\x1\x4C\x1\x4B\x1\xFFFF\x1\x4B",
				"",
				"\x1\x2D\x1\xFFFF\x1\x2D\x2\xFFFF\xA\x61\x7\xFFFF\x6\x4B\x1\xFFFF\x1"+
				"\x4B\x18\xFFFF\x6\x4B\x1\xFFFF\x1\x4B",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"\x1\x64",
				"",
				"\x1\x65",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"\x1\x67",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"",
				"\x1\x6A",
				"\x1\x6B",
				"\x1\x6C",
				"",
				"\x1\x6D",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"\x1\x6F",
				"\x1\x70",
				"",
				"\xA\x61\x7\xFFFF\x6\x4B\x1\xFFFF\x1\x4B\x18\xFFFF\x6\x4B\x1\xFFFF\x1"+
				"\x4B",
				"",
				"",
				"\x1\x71",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"",
				"\x1\x73",
				"",
				"",
				"\x1\x74",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"",
				"\x1\x78",
				"\x1\x79",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"\x1\x7C",
				"",
				"",
				"",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				"",
				"",
				"\x1\x7F",
				"",
				"",
				"\xA\x25\x7\xFFFF\x1A\x25\x6\xFFFF\x1A\x25",
				""
			};

		private static readonly short[] DFA17_eot = DFA.UnpackEncodedString(DFA17_eotS);
		private static readonly short[] DFA17_eof = DFA.UnpackEncodedString(DFA17_eofS);
		private static readonly char[] DFA17_min = DFA.UnpackEncodedStringToUnsignedChars(DFA17_minS);
		private static readonly char[] DFA17_max = DFA.UnpackEncodedStringToUnsignedChars(DFA17_maxS);
		private static readonly short[] DFA17_accept = DFA.UnpackEncodedString(DFA17_acceptS);
		private static readonly short[] DFA17_special = DFA.UnpackEncodedString(DFA17_specialS);
		private static readonly short[][] DFA17_transition;

		static DFA17()
		{
			int numStates = DFA17_transitionS.Length;
			DFA17_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA17_transition[i] = DFA.UnpackEncodedString(DFA17_transitionS[i]);
			}
		}

		public DFA17( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 17;
			this.eot = DFA17_eot;
			this.eof = DFA17_eof;
			this.min = DFA17_min;
			this.max = DFA17_max;
			this.accept = DFA17_accept;
			this.special = DFA17_special;
			this.transition = DFA17_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( AND | ASSIGN | BEGIN | BOOLEAN | COLON | COMMA | DO | DOT | ELSE | END | EQUAL | FALSE | FOR | GE | GT | IF | INTEGER | LCURLY | LE | LPAREN | LT | MINUS | NOT | NOT_EQUAL | OR | PLUS | PROGRAM | RCURLY | READ | REAL | RPAREN | SEMI | SLASH | STAR | THEN | TO | TRUE | VAR | WHILE | WRITE | WS | COMMENT | IDENT | NUM_BIN | NUM_OCT | NUM_DEC | NUM_HEX | NUM_REAL );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition17(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA17_14 = input.LA(1);

				s = -1;
				if (((LA17_14>='\u0000' && LA17_14<='\uFFFF'))) {s = 54;}

				else s = 53;

				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 17, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}
